# Neonatal Mortality Rates

Neonatal mortality refers to a death that occurs within the first month of life. The neonatal mortality rate (NMR) is the number of neonatal deaths per 1,000 live births [@unigme]. The Third Sustainable Development Goal (SDG) calls for a reduction in NMR to 12. In this example we will create a graph of the estimated NMR for the past 50 years for: Argentina, Australia, Canada, and Kenya.

# Plan {background-color="#2E3440"}
[Neonatal Mortality Rates (NMR)]{.huge}

## plan
<br>

The dataset needs to have variables that specify the country and the year. It also needs to have a variable with the NMR estimate for that year for that country. Roughly, it should look like @fig-nmrexample-data (next slide). We are interested to make a graph with year on the x-axis and estimated NMR on the y-axis. Each country should have its own series. A quick sketch of what we are looking for is @fig-nmrexample-graph (next slide).


## plan

::: {#fig-nmrexample layout-ncol="2"}
![Quick sketch of a potentially useful NMR dataset](../media/tswd-figures/02-nmr_dataset_sketch.png){#fig-nmrexample-data width="85%"}

![Quick sketch of a graph of NMR by country over time](../media/tswd-figures/02-NMRgraph.png){#fig-nmrexample-graph width="85%"}

Sketches of a dataset and graph about the neonatal mortality rate (NMR)
:::


# Simulate {background-color="#2E3440"}
[Neonatal Mortality Rates (NMR)]{.huge}


## simulate
<br>

> To simulate some data that aligns with our plan, we will need three columns: `country`, `year`, and `NMR`. We can do this by repeating the name of each country 50 times with `rep()`, and enabling the passing of 50 years. Then we draw from the uniform distribution with `runif()` to simulate an estimated NMR value for that year for that country.

## simulate
<br>

```{r}
#| output-location: slide
set.seed(853)

simulated_nmr_data <-
    tibble(
        country =
            c(
                rep("Argentina", 50), rep("Australia", 50),
                rep("Canada", 50), rep("Kenya", 50)
            ),
        year =
            rep(c(1971:2020), 4),
        nmr =
            runif(n = 200, min = 0, max = 100)
    )

head(simulated_nmr_data)
```

## simulate
<br>

> While this simulation works, it would be time consuming and error prone if we decided that instead of 50 years, we were interested in simulating, say, 60 years. One way to improve this code is to replace all instances of 50 with a variable.\index{simulation}\index{distribution!uniform}

## simulate
<br>

```{r}
#| output-location: slide
set.seed(853)

number_of_years <- 50

simulated_nmr_data <-
    tibble(
        country =
            c(
                rep("Argentina", number_of_years), rep("Australia", number_of_years),
                rep("Canada", number_of_years), rep("Kenya", number_of_years)
            ),
        year =
            rep(c(1:number_of_years + 1970), 4),
        nmr =
            runif(n = number_of_years * 4, min = 0, max = 100)
    )

head(simulated_nmr_data)
```

The result will be the same, but now if we want to change from 50 to 60 years, we only have to make the change in one place.

## simulate

> We can have confidence in this simulated dataset because it is relatively straight forward, and we wrote the code for it. But when we turn to the real dataset, it is more difficult to be sure that it is what it claims to be. Even if we trust the data, we need to be able to share that confidence with others. One way forward is to establish some tests of whether our data are as they should be. For instance, we expect:
>
> - That "country" is exclusively one of these four: "Argentina", "Australia", "Canada", or "Kenya".
> - Conversely, "country" contains all those four countries.
> - That "year" is no smaller than 1971 and no larger than 2020, and is an integer, not a letter or a number with decimal places.
> - That "nmr" is a value somewhere between 0 and 1,000, and is a number.
>
> We can write a series of tests based on these features, that we expect the dataset to pass.

## simulate

```{r}
simulated_nmr_data$country |>
    unique() == c("Argentina", "Australia", "Canada", "Kenya")

simulated_nmr_data$country |>
    unique() |>
    length() == 4

simulated_nmr_data$year |> min() == 1971
simulated_nmr_data$year |> max() == 2020
simulated_nmr_data$nmr |> min() >= 0
simulated_nmr_data$nmr |> max() <= 1000
simulated_nmr_data$nmr |> class() == "numeric"
```

## simulate
<br>

> Having passed these tests, we can have confidence in the simulated dataset. More importantly, we can apply these tests to the real dataset. This enables us to have greater confidence in that dataset and to share that confidence with others.

# Acquire {background-color="#2E3440"}
[Neonatal Mortality Rates (NMR)]{.huge}

##

The UN Inter-agency Group for Child Mortality Estimation (IGME) [provides](https://childmortality.org/) NMR estimates that we can download and save.

```{r}
igme_data_path <- here("data", "igme.csv")
igme_data_path
```

```{r}
#| eval: false
#| echo: true
raw_igme_data <-
    read_csv(
        file =
            "https://childmortality.org/wp-content/uploads/2021/09/UNIGME-2021.csv",
        show_col_types = FALSE
    )

write_csv(x = raw_igme_data, file = igme_data_path)
```


##

```{r}
#| eval: true
#| echo: true

raw_igme_data <-
    read_csv(
        file = igme_data_path,
        show_col_types = FALSE
    )
```


##

With established data, such as this, it can be useful to read supporting material about the data. In this case, a codebook\index{data!codebook} is available [here](https://childmortality.org/wp-content/uploads/2021/03/CME-Info_codebook_for_downloads.xlsx). After this we can take a quick look at the dataset to get a better sense of it. We might be interested in what the dataset looks like with `head()` and `tail()`


```{r}
head(raw_igme_data)
```

##

and what the names of the columns are with `names()`

```{r}
names(raw_igme_data)
```

##

> We would like to clean up the names and only keep the rows and columns that we are interested in. Based on our plan, we are interested in rows where "Sex" is "Total", "Series Name" is "UN IGME estimate", "Geographic area" is one of "Argentina", "Australia", "Canada", and "Kenya", and the "Indicator" is "Neonatal mortality rate". After this we are interested in just a few columns: "geographic_area", "time_period", and "obs_value".

##

```{r}
#| output-location: slide
cleaned_igme_data <-
    clean_names(raw_igme_data) |>
    filter(
        sex == "Total",
        series_name == "UN IGME estimate",
        geographic_area %in% c("Argentina", "Australia", "Canada", "Kenya"),
        indicator == "Neonatal mortality rate"
    ) |>
    select(geographic_area, time_period, obs_value)

head(cleaned_igme_data)
```

##

> We need to fix two other aspects: the class of "time_period" is character when we need it to be a year, and the name of "obs_value" should be "nmr" to be more informative.

##

```{r}
cleaned_igme_data <-
    cleaned_igme_data |>
    mutate(
        time_period = str_remove(time_period, "-06"),
        time_period = as.integer(time_period)
    ) |>
    filter(time_period >= 1971) |>
    rename(nmr = obs_value, year = time_period, country = geographic_area)

head(cleaned_igme_data)
```

##

> Finally, we can check that our dataset passes the tests that we developed based on the simulated dataset.

##

```{r}
cleaned_igme_data$country |>
    unique() == c("Argentina", "Australia", "Canada", "Kenya")

cleaned_igme_data$country |>
    unique() |>
    length() == 4

cleaned_igme_data$year |> min() == 1971
cleaned_igme_data$year |> max() == 2020
cleaned_igme_data$nmr |> min() >= 0
cleaned_igme_data$nmr |> max() <= 1000
cleaned_igme_data$nmr |> class() == "numeric"
```

##

All that remains is to save the nicely cleaned dataset.

```{r}
cleaned_igme_data_path <- here("data", "cleaned_igme_data.csv")
write_csv(x = cleaned_igme_data, file = cleaned_igme_data_path)
```

# Explore/Understand {background-color="#2E3440"}
[Neonatal Mortality Rates (NMR)]{.huge}

## 

We would like to make a graph of estimated NMR using the cleaned dataset. First, we read in the dataset.

```{r}
cleaned_igme_data <-
    read_csv(
        here("data", "cleaned_igme_data.csv"),
        show_col_types = FALSE
    )
```

##

> We can now make a graph of how NMR has changed over time and the differences between countries (@fig-nmrgraph).

```{r}
#| label: fig-nmrgraph
#| echo: true
#| eval: true
#| warning: false
#| fig-cap: "Neonatal Mortality Rate (NMR), for Argentina, Australia, Canada, and Kenya (1971-2020)"
#| output-location: slide

cleaned_igme_data |>
    ggplot(aes(x = year, y = nmr, color = country)) +
    geom_point() +
    theme_minimal() +
    labs(x = "Year", y = "Neonatal Mortality Rate (NMR)", color = "Country") +
    scale_color_brewer(palette = "Set1") +
    theme(legend.position = "bottom")
```

# Share {background-color="#2E3440"}
[Neonatal Mortality Rates (NMR)]{.huge}


## share

Example taken directly from @alexander2023telling, [here]().

::: {.callout-note appearance="minimal"}
Neonatal mortality refers to a death that occurs within the first month of life. In particular, the neonatal mortality rate (NMR) is the number of neonatal deaths per 1,000 live births. We obtain estimates for NMR for four countries---Argentina, Australia, Canada, and Kenya---over the past 50 years.

The UN Inter-agency Group for Child Mortality Estimation (IGME) provides estimates of the NMR at the website: https://childmortality.org/. We downloaded their estimates then cleaned and tidied the dataset using the statistical programming language R [@citeR].

We found considerable change in the estimated NMR over time and between the four countries of interest (@fig-nmrgraph). We found that the 1970s tended to be associated with reductions in the estimated NMR. Australia and Canada were estimated to have a low NMR at that point and remained there through 2020, with further slight reductions. The estimates for Argentina and Kenya continued to have substantial reductions through 2020.

Our results suggest considerable improvements in estimated NMR over time. NMR estimates are based on a statistical model and underlying data. The double burden\index{data!double burden} of data is that often high-quality data are less easily available for groups, in this case countries, with worse outcomes. Our conclusions are subject to the model that underpins the estimates and the quality of the underlying data, and we did not independently verify either of these.
:::

# Wrap Up

> We have covered much ground in this chapter, and it is normal to have not followed it all. The best way to proceed is to go through each of the three case studies in your own time. Type all the code out yourself, rather than copy-pasting, and run it bit by bit, even if you do not entirely understand what it is doing. Then try to add your own comments to it.
>
> It is also the case that it is not necessary to fully understand everything in this chapter at this point. Some students find it best to continue going through the next few chapters of this book, and return to this one later.